{"version":3,"sources":["Components/Add/Add.js","axios-post.js","Components/Item/Item.js","container/List/List.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["add","props","Grid","container","spacing","item","xs","htmlFor","type","onChange","event","inputHandler","value","title","onClick","buttonHandler","instance","axios","create","baseURL","Checkbox","checkboxHandler","id","color","checked","deleteButtonHandler","style","marginLeft","List","index","data","console","log","post","then","responce","catch","error","updateData","newData","splice","map","items","this","PureComponent","App","state","target","setState","length","get","Object","values","valueOf","className","Add","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5a99c416.chunk.js","sourcesContent":["import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\n\nconst add = (props) => {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n            <form>\n                <label htmlFor=\"title\">\n                    <h3>What's Your Plan Today</h3>\n                </label>\n                <input\n                    type=\"text\"\n                    onChange={(event)=>props.inputHandler(event)}\n                    value={props.title}\n                />\n                <input \n                    type=\"button\" \n                    value=\"Add\"\n                    onClick={props.buttonHandler}/>\n            </form>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default add\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://chatapp-hyy-default-rtdb.asia-southeast1.firebasedatabase.app/\"\n})\n\nexport default instance","import React from 'react'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport Grid from '@material-ui/core/Grid'\n  \n\nexport default function item (props){\n    // const classes = useStyles()\n    return (\n        <div >\n            <Grid container spacing={3}>\n                <Grid item xs={10}>\n                    <Checkbox \n                        onClick={()=>props.checkboxHandler(props.id)}\n                        color=\"primary\"\n                        checked={props.checked}/>\n                    {props.title}\n                </Grid>\n                <Grid item xs={2}>\n                        <DeleteIcon \n                            onClick={()=>props.deleteButtonHandler(props.id)}\n                            style={{marginLeft: \"20%\"}}\n                        />\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n","import React, { PureComponent } from 'react'\nimport axios from \"../../axios-post\"\n\nimport Item from '../../Components/Item/Item'\n\nexport default class List extends PureComponent {\n\n    checkboxHandler = (index)=>{\n        let data = [...this.props.data]\n        console.log(\"checkbox debug\" ,data[index])\n        data[index].checked = !data[index].checked\n        axios.post(\"/data.json\", data)\n        .then(responce=>{\n          console.log(\"Post\", responce)\n        })\n        .catch(error=>console.log(error))\n        this.props.updateData(data)\n    }\n\n    deleteButtonHandler = (index) =>{\n        let newData = [...this.props.data]\n        newData.splice(index,1)\n        newData.map((item, index)=>{\n            return item.id = index\n        })\n        this.props.updateData(newData)\n        axios.post(\"/data.json\", newData)\n        .then(responce=>{\n          console.log(\"Post\", responce)\n          // return axios.post(\"/\", this.state.data)\n        })\n        .catch(error=>console.log(error))\n    }\n\n    render() {\n        const data = this.props.data\n        let items = <p>Loading .....</p>\n        items = data.map((item,index)=>{\n            let checked = item.checked\n            let title = item.title\n            // console.log(this.props.data[index].checked)\n            return <Item \n                key={item.id} \n                id={item.id}\n                checked={checked} \n                checkboxHandler={this.checkboxHandler}\n                deleteButtonHandler={this.deleteButtonHandler}\n                title={title}/>\n        })\n        console.log(\"[List.js]: Full data\",data)\n        return (\n            <div>\n                {items}\n            </div>\n        )\n    }\n}\n\n","import React, { PureComponent } from 'react'\n\nimport Add from \"./Components/Add/Add\"\nimport List from \"./container/List/List\"\nimport axios from \"./axios-post\"\n\nexport class App extends PureComponent {\n\n  state ={\n    title: '',\n    checked: false,\n    data: []\n  }\n\n  componentDidMount(){\n    axios.get(\"/data.json\")\n      .then(responce=>{\n        console.log(\"Mount data\", responce)\n        if(responce.data!==null){\n          const data = Object.values(responce.data.valueOf())\n          console.log(data[data.length-1])\n          this.setState({\n            data: data[data.length-1]\n          })\n        }\n      })\n      .catch(error=>{\n        console.log(error)\n      })\n  }\n\n  inputHandler = (event)=>{\n    const value = event.target.value\n    this.setState({\n      title: value\n    })\n  }\n\n  buttonHandler = () =>{\n    const item = {\n      title: this.state.title,\n      checked: this.state.checked,\n      id: this.state.data.length\n    }\n    const data =[...this.state.data, item]\n    this.setState({\n      data: data,\n      title: ''\n    })\n    axios.post(\"/data.json\", data)\n        .then(responce=>{\n          console.log(\"Post\", responce)\n        })\n        .catch(error=>console.log(error))\n  }\n\n  updateData = (item) =>{\n    this.setState({\n      data: item\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Add \n          title={this.state.title}\n          buttonHandler={this.buttonHandler}\n          inputHandler={this.inputHandler}\n          />\n        <br/>\n        <List \n          data={this.state.data}\n          updateData={this.updateData}\n          />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}